# libpathrs: safe path resolution on Linux
# Copyright (C) 2019-2024 Aleksa Sarai <cyphar@cyphar.com>
# Copyright (C) 2019-2024 SUSE LLC
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

[package]
name = "pathrs"
version = "0.0.2+dev"
license = "LGPL-3.0-or-later"
authors = ["Aleksa Sarai <cyphar@cyphar.com>"]

description = "C-friendly API to make path resolution safer on Linux."
repository = "https://github.com/openSUSE/libpathrs"
readme = "README.md"

keywords = ["file", "fs", "security", "linux"]
categories = ["filesystem"]
edition = "2021"
rust-version = "1.63"

[badges]
maintenance = { status = "experimental" }
travis-ci = { repository = "openSUSE/libpathrs" }

[lib]
crate-type = ["rlib", "cdylib", "staticlib"]

[features]
# Only used for tests.
_test_as_root = []

[profile.release]
# Enable link-time optimisations.
lto = true
# Since we are cdylib, panic!s will cause aborts once they hit the FFI barrier
# anyway. We might as well reduce our code size if we're doing it.
panic = "abort"

[dependencies]
bitflags = "^2"
itertools = "^0.13"
# MSRV(1.70): Use OnceLock.
# MSRV(1.80): Use LazyLock.
lazy_static = "^1"
libc = "^0.2"
memchr = "^2"
rand = "^0.8"
# MSRV(1.65): Use regex >= 1.10.
regex = "1.9.*"
rustix = { version = "^0.38", features = ["fs"] }
thiserror = "^1"

[dev-dependencies]
anyhow = "^1"
clap = { version = "^4", features = ["cargo"] }
errno = "^0.3"
tempfile = "^3"
paste = "^1"
pretty_assertions = "^1"
# Enable the "process" feature for getcwd() in our tests.
rustix = { version = "^0.38", features = ["process"] }

[lints.rust]
# We have special handling for coverage runs (which set cfg(coverage)).
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
